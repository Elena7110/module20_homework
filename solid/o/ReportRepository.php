<?php

namespace solid\o;
// прослойка между хранилищем и между данными
class ReportRepository
{
	// объявляем приватное закрытое свойство для хранения объекта с отчетом, который необходимо сохранять. объект хранилища сохраняется в переменной sever
    private $report, $saver;

   //  метод конструктор
   //  будет принимать параметр report (объект класса report) и аргумент, который будет хранить объект класса, который будет сохраненять данные. В качестве второго аргумента будет передаваться объект класса FileSave
   //  public function __construct(Report $report, FileSave $saver)удалим жествое указание на объект класса FileSave, чтобы соответсвовать второму принципу solid
	// в качестве второго аргумента указываем, что передаваемый метод обязательно должен реализовывать интерфейс Saver. В объекте текущего класса обязательно присутствует метод save
	 public function __construct(Report $report, Saver  $saver)
    {

        $this->report = $report;
		//   инециализируем свойство saver
        $this->saver = $saver;
    }

	//  метод, который будет использоваться для сохранения данных
    public function save() {
		// обращаемся к объекту saver и вызываем на исполнение метод save, который принимает в качестве первого аргумента данные, которые необходимо сохранить, для доступа к данным вызываем метод renderReport
        $this->saver->save($this->report->renderReport());
    }


}
?>